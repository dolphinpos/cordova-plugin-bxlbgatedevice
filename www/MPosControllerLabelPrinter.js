var exec = require('cordova/exec');
//var MPosControllerDevices = require('./MPosControllerDevices');

var MPosControllerLabelPrinter = /** @class */ (function () {
    function MPosControllerLabelPrinter() { }
    // COMMON Methods
    MPosControllerLabelPrinter.prototype.getDeviceId = function (successCallback, failureCallback) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'getDeviceId', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.selectInterface = function (successCallback, failureCallback, interfaceType, address) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'selectInterface', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.selectCommandMode = function (successCallback, failureCallback, mode) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'selectCommandMode', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setTransaction = function (successCallback, failureCallback, transactionMode) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'setTransaction', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.openService = function (successCallback, failureCallback, id) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'openService', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.closeService = function (successCallback, failureCallback, timeout) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'closeService', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.isOpen = function (successCallback, failureCallback) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'isOpen', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.directIO = function (successCallback, failureCallback, rawData) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'directIO', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setStatusUpdateEvent = function (successCallback, failureCallback, handler) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'setStatusUpdateEvent', Array.from(arguments).slice(2)); };
    
    // NOT IMPLEMENTED API : START
    MPosControllerLabelPrinter.prototype.setTimeout = function (successCallback, failureCallback, timeout) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'setTimeout', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setReadMode = function (successCallback, failureCallback, readMode) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'setReadMode', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.convertHID = function (successCallback, failureCallback, newType) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'convertHID', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.getResult = function (successCallback, failureCallback) { exec(successCallback, failureCallback, 'MPosControllerLabelPrinter', 'getResult', Array.from(arguments).slice(2)); };
    // NOT IMPLEMENTED API : END
    // Setter Methods of MPosControllerLabelPrinter
    MPosControllerLabelPrinter.prototype.setTextEncoding = function (successCallback, failureCallback, encoding) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setTextEncoding', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setCharacterset = function (successCallback, failureCallback, characterset) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setCharacterset', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setPrintingType = function (successCallback, failureCallback, printingType) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setPrintingType', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setMargin = function (successCallback, failureCallback, horizontalMargin, verticalMargin) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setMargin', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setBackFeedOption = function (successCallback, failureCallback, enable, stepQuantity) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setBackFeedOption', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setLength = function (successCallback, failureCallback, labelLength, gapLength, mediaType, offsetLength) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setLength', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setWidth = function (successCallback, failureCallback, labelWidth) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setWidth', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setBufferMode = function (successCallback, failureCallback, doubleBuffer) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setBufferMode', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setSpeed = function (successCallback, failureCallback, speed) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setSpeed', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setDensity = function (successCallback, failureCallback, density) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setDensity', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setOrientation = function (successCallback, failureCallback, orientation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setOrientation', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setOffset = function (successCallback, failureCallback, offset) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setOffset', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setCuttingPosition = function (successCallback, failureCallback, position) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setCuttingPosition', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.setAutoCutter = function (successCallback, failureCallback, enableAutoCutter, cuttingPeriod) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'setAutoCutter', Array.from(arguments).slice(2)); };
    // Getter Methods of MPosControllerLabelPrinter
    MPosControllerLabelPrinter.prototype.getModelName = function (successCallback, failureCallback) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'getModelName', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.getFirmwareVersion = function (successCallback, failureCallback) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'getFirmwareVersion', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.checkPrinterStatus = function (successCallback, failureCallback) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'checkPrinterStatus', Array.from(arguments).slice(2)); };
    // Printing Methods of MPosControllerLabelPrinter
    MPosControllerLabelPrinter.prototype.printBuffer = function (successCallback, failureCallback, numberOfCopies) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'printBuffer', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.printRawData = function (successCallback, failureCallback, rawData) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'printRawData', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawTextDeviceFont = function (successCallback, failureCallback, data, xPos, yPos, fontSelection, fontWidth, fontHeight, rightSpace, rotation, reverse, bold, rightToLeft, alignment) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawTextDeviceFont', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawTextVectorFont = function (successCallback, failureCallback, data, xPos, yPos, fontSelection, fontWidth, fontHeight, rightSpace, rotation, reverse, bold, italic, rightToLeft, alignment) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawTextVectorFont', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcode1D = function (successCallback, failureCallback, data, xPos, yPos, barcodeType, widthNarrow, widthWide, height, hri, quietZoneWidth, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcode1D', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeMaxiCode = function (successCallback, failureCallback, data, xPos, yPos, mode) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeMaxiCode', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodePDF417 = function (successCallback, failureCallback, data, xPos, yPos, rowCount, columnCount, eccLevel, dataCompression, hri, startPosition, moduleWidth, barHeight, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodePDF417', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeQRCode = function (successCallback, failureCallback, data, xPos, yPos, size, model, eccLevel, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeQRCode', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeDataMatrix = function (successCallback, failureCallback, data, xPos, yPos, size, reverse, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeDataMatrix', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeAztec = function (successCallback, failureCallback, data, xPos, yPos, size, extendedChannel, eccLevel, menuSymbol, numberOfSymbols, optionalID, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeAztec', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeCode49 = function (successCallback, failureCallback, data, xPos, yPos, widthNarrow, widthWide, height, hri, startingMode, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeCode49', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeCodaBlock = function (successCallback, failureCallback, data, xPos, yPos, widthNarrow, widthWide, height, securityLevel, dataColumns, mode, encode) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeCodaBlock', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeMicroPDF = function (successCallback, failureCallback, data, xPos, yPos, moduleWidth, moduleHeight, mode, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeMicroPDF', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeIMB = function (successCallback, failureCallback, data, xPos, yPos, hri, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeIMB', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeMSI = function (successCallback, failureCallback, data, xPos, yPos, narrowWidth, wideWidth, height, checkDigitSelection, printCheckDigit, hri, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeMSI', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodePlessey = function (successCallback, failureCallback, data, xPos, yPos, narrowWidth, wideWidth, height, printCheckDigit, hri, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodePlessey', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeTLC39 = function (successCallback, failureCallback, data, xPos, yPos, narrowWidth, wideWidth, height, rowHeightOfMicroPDF417, narrowWidthOfMicroPDF417, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeTLC39', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBarcodeRSS = function (successCallback, failureCallback, data, xPos, yPos, barcodeType, magnification, separatorHeight, barcodeHeight, segmentWidth, rotation) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBarcodeRSS', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawBlock = function (successCallback, failureCallback, startPosX, startPosY, endPosX, endPosY, option, thickness) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawBlock', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawCircle = function (successCallback, failureCallback, startPosX, startPosY, sizeSelection, multiplier) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawCircle', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawImageFile = function (successCallback, failureCallback, filePath, startPosX, startPosY, width, brightness, isDithering, isCompress) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawImageFile', Array.from(arguments).slice(2)); };
    MPosControllerLabelPrinter.prototype.drawImageWithBase64 = function (successCallback, failureCallback, base64String, startPosX, startPosY, width, brightness, isDithering, isCompress) { exec(successCallback, failureCallback,'MPosControllerLabelPrinter', 'drawImageWithBase64', Array.from(arguments).slice(2)); };
    return MPosControllerLabelPrinter;
}());

module.exports = MPosControllerLabelPrinter;
